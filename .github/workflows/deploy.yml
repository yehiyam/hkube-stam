name: Deployer
on:
  issue_comment:
    type: [created]

jobs:
  deploy-check:
    runs-on: ubuntu-latest
    steps:
      - id: check
        name: check for deployment command
        uses: khan/pull-request-comment-trigger@master
        with:
          trigger: '/deploy'
          reaction: rocket
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
  deployment:
    runs-on: ubuntu-latest
    needs: deploy-check
    if: needs.deploy-check.outputs.triggered == 'true'
    steps:
    - name: get pull request ref
      id: get_pull_request_ref
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/:repository/pulls/:issue_id
        repository: ${{ github.repository }}
        issue_id: ${{ github.event.issue.number }}
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    - name: create deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments
        repository: ${{ github.repository }}
        ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
        environment: dev
        auto_merge: false
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    - name: set deployment status to in progress
      id: start_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: dev
        environment_url: https://example.com
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: in_progress
        mediaType: '{"previews": ["flash", "ant-man"]}'
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    outputs:
      branchName: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
  build_job:
    runs-on: ubuntu-latest
    needs:
      - deploy-check
      - deployment
    if: needs.deploy-check.outputs.triggered == 'true'
    name: build dockers
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkout Helm
      uses: actions/checkout@v2
      with:
        repository: yehiyam/helm
        path: helm
        ref: ${{ needs.deployment.outputs.branchName }}
    - name: Docker login
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
    - name: changed
      id: changed
      uses: yehiyam/deploy-to-k8s@master
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        prNumber: ${{ github.event.issue.number }}
    - uses: actions/upload-artifact@v2
      with:
        name: values.yaml
        path: helm/hkube/values.yaml
    - name: update helm repo
      uses: EndBug/add-and-commit@v4
      with:
        add: values.yaml
        cwd: 'helm/hkube'
        message: "update version [skip ci]"
        ref: ${{ needs.deployment.outputs.branchName }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    # - name: update helm repo
    #   run: |
    #     cd helm/hkube
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git status
    #     git remote -v
    #     git add values.yaml
    #     git commit -m "update version [skip ci]"
    #     git push 
    - name: get-helm
      run: |
        curl -LO https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
        tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
        mv linux-amd64/helm $HOME/helm
    - name: package
      run: |
        cd helm/hkube
        $HOME/helm package --app-version=${{ steps.changed.outputs.version}} --version=${{ steps.changed.outputs.version}} -d /tmp/
    - uses: actions/upload-artifact@v2
      with:
        name: hkube-${{ steps.changed.outputs.version}}.tgz
        path: /tmp/hkube-${{ steps.changed.outputs.version}}.tgz
    outputs:
      chart: hkube-${{ steps.changed.outputs.version}}.tgz
  deploy:
    runs-on: ubuntu-latest
    needs:
      - deploy-check
      - build_job
    if: needs.deploy-check.outputs.triggered == 'true'
    name: build and deploy
    steps:
    - name: download chart
      uses: actions/download-artifact@v2
      with:
        name: needs.build_job.outputs.chart
    - name: deploy
      uses: 'deliverybot/helm@v1'
      with:
        release: 'hkube' 
        namespace: default


